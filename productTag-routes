const router = require('express').Router()
const sequelize = require('../../config/connection')
const { Product, Tag, ProductTag } = require('../../models')

// The `/api/products` endpoint

//GET: find all products (include associated category and tag data)
router.get('/', (req, res) => {
  ProductTag.findAll({
    attributes: [
      'id',
      'product_id',
      'tag_id'
    ],
    include: [
        {
            model: Product,
            attributes: ['id', 'product_name', 'price', 'stock', 'category_id']
        },
        { 
            model: Tag,
            attributes: ['id', 'tag_name']
        }
    ]
  })
    .then(dbProductTagData => res.json(dbProductTagData))
    .catch(err => {
      console.log(err);
      res.status(500).json(err)
    })
})


//GET: find product by id
router.get('/:id', (req, res) => {
  ProductTag.findOne({
    attributes: [
      'id',
      'product_id',
      'tag_id'
    ],
    include: [
        {
            model: Product,
            attributes: ['id', 'product_name', 'price', 'stock', 'category_id']
        },
        { 
            model: Tag,
            attributes: ['id', 'tag_name']
        }
    ]
  })
  .then(dbProductTagData => {
    if (!dbProductTagData) {
      res.status(404).json({ message: 'No product tag found with this id' });
      return;
    }
    res.json(dbProductTagData);
  })
  .catch(err => {
    console.log(err);
    res.status(500).json(err);
  })
})

//POST: create new product
router.post('/', (req, res) => {
  /* req.body should look like this...
    {
      product_name: "Basketball",
      price: 200.00,
      stock: 3,
      tagIds: [1, 2, 3, 4]
    }
  */
  ProductTag.create(req.body)
    .then((product) => {
      // if there's product tags, we need to create pairings to bulk create in the ProductTag model
      if (req.body.tagIds.length) {
        const productTagIdArr = req.body.tagIds.map((tag_id) => {
          return {
            product_id: product.id,
            tag_id,
          };
        });
        return ProductTag.bulkCreate(productTagIdArr);
      }
      // if no product tags, just respond
      res.status(200).json(product);
    })
    .then((productTagIds) => res.status(200).json(productTagIds))
    .catch((err) => {
      console.log(err);
      res.status(400).json(err);
    });
});

//PUT: update product tag
router.put('/:id', (req, res) => {
  // update product tag data
  ProductTag.update(req.body, {
    where: {
      id: req.params.id,
    },
  })
    .then((product) => {
      // find all associated tags from ProductTag
      return ProductTag.findAll({ where: { product_id: req.params.id } });
    })
    .then((productTags) => {
      // get list of current tag_ids
      const productTagIds = productTags.map(({ tag_id }) => tag_id);
      // create filtered list of new tag_ids
      const newProductTags = req.body.tagIds
        .filter((tag_id) => !productTagIds.includes(tag_id))
        .map((tag_id) => {
          return {
            product_id: req.params.id,
            tag_id,
          };
        });
      // figure out which ones to remove
      const productTagsToRemove = productTags
        .filter(({ tag_id }) => !req.body.tagIds.includes(tag_id))
        .map(({ id }) => id);

      // run both actions
      return Promise.all([
        ProductTag.destroy({ where: { id: productTagsToRemove } }),
        ProductTag.bulkCreate(newProductTags),
      ]);
    })
    .then((updatedProductTags) => res.json(updatedProductTags))
    .catch((err) => {
      // console.log(err);
      res.status(400).json(err);
    });
});

//DELETE: delete product tag by id
router.delete('/:id', (req, res) => {
  ProductTag.destroy({
    where: {
      id: req.params.id
    }
  })
    .then(dbProductTagData => {
      if (!dbProductTagData) {
        res.status(404).json({ message: 'No product found with this id' });
        return;
      }
      res.json(dbProductTagData);
    })
    .catch(err => {
      console.log(err);
      res.status(500).json(err);
    });
});

module.exports = router
